{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)ea5b553e-15cb-4608-8dd0-f02462fed24a","ParentGuid":"(Guid)a2e4a053-9bab-4e6d-8bfa-78852b0a11c2","Name":"(string)Mail_PRG","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)58548d2c-f1b1-453d-9195-66c94e2a3ae0","@Value":{"@Type":"58548d2c","@Value":{"SFCErrorAnalyzation":null,"SFCErrorAnalyzationTable":null,"SFCCurrentSteps":null,"Title":"(string)IecSfc","Company":"(string)System","Version":"(string)3.4.2.0","Namespace":"(string)IecSfc","Flags":{"@Type":"{}","@Value":[{"@Key":{"@Type":"27d8150b:Enum","@Value":"EnableLimit"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"Init"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"Reset"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"QuitError"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"Pause"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"Error"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"Trans"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"ErrorStep"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"ErrorPOU"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"CurrentStep"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"Tip"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"TipMode"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"SFCErrorAnalyzation"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}},{"@Key":{"@Type":"27d8150b:Enum","@Value":"SFCErrorAnalyzationTable"},"@Value":{"@Type":"24565a38","@Value":{"Use":"(bool)False","Declare":"(bool)True"}}}]},"CalcActiveTransOnly":"(bool)False","UseDefaults":"(bool)True"}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"24565a38":"{24565a38-6368-4874-ab9a-0ef7ec269521}","27d8150b":"{27d8150b-ef58-4fff-8da1-1f7dd5f9ea51}","2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","58548d2c":"{58548d2c-f1b1-453d-9195-66c94e2a3ae0}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","bool":"System.Boolean","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)\t\nCASE eState OF\n\tSTATES.FIRST_START: (* setup the mail program with default values *)\n\t\t\t\tfStart_check := TRUE ;\n\t\t\t\tstartcounter := startcounter + 1;\n\t\t\t\t(* Memory for the ReceiveMail *)\n\t\t\t\temailMemory.pBody := ADR(sBodyRecv);\n\t\t\t\temailMemory.udiBodySize := SIZEOF(sBodyRecv) -1;\t\t\n\t\t\t\t\n\t\t\t\t(* authentication information for the mail account *)\n\t\t\t\tuserInfo.sUserName := sUserName; \n\t\t\t\tuserInfo.sPassword := sPassword;\n\t\t\t\t\n\t\t\t\t(* Folder to safe incomming attachments *)\n\t\t\t\temailMemory.sAttachFolder := sAttachmentFolder;\n\t\t\t\tIF xTLS THEN\n\t\t\t\t\teConnectionType := MAIL.CONNECTION_TYPE.TLS;\n\t\t\t\tELSE\n\t\t\t\t\teConnectionType := MAIL.CONNECTION_TYPE.STD;\n\t\t\t\tEND_IF\n\t\t\t\tServerFB(xExecute := TRUE, sSMTPServer := sSmtpServer, uiPortSMTP := uiSmtpPort,\n\t\t\t\t\t\t  sPopServer := sPopServer, uiPortPOP := uiPop3Port, eConnectionType := eConnectionType);\n\t\t\t\t\t\t  \n\t\t\t\t(* setting visability for Visu Elements *)\n\t\t\t\txInvisibleSendMail := TRUE;\n\t\t\t\txInvisibleRecvMail := FALSE;\n\t\t\t\n\t\t\t\teState := STATES.WAITING;\n\t\n\tSTATES.INIT_SERVER: (* reset and reinitialize the server *)\n\t\t\t\tIF xResetServer THEN\n\t\t\t\t\tServerFB(xExecute:= FALSE);\n\t\t\t\t\tIF NOT ServerFB.xDone AND NOT ServerFB.xError THEN\n\t\t\t\t\t\t\n\t\t\t\t\t\txResetServer := FALSE;\n\t\t\t\t\t\teState := States.FIRST_START; (* channged from FIRST_START  *)\n\t\t\t\t\tEND_IF \n\t\t\t\tEND_IF\n\t\t\t\t\n\t\t\t\t\n\tSTATES.SEND_MAIL: (* send Mail *)\n\t\t\t\t(* setting visabiltiy for Visu Elements *)\n\t\t\t\txInvisibleSendMail := FALSE;\n\t\t\t\txInvisibleRecvMail := TRUE;\n\t\t\t\t\n\t\t\t\t(* Memory allocation for MailToSend *)\n\t\t\t\tmailToSend.Body.pString := ADR(sBodyToSend);\n\t\t\t\tmailToSend.Body.uiSize := INT_TO_UINT(LEN(sBodyToSend));\n\t\t\t\t\n\t\t\t\tSendMailFB(xExecute := TRUE, ServerFB := ServerFB, mailToSend := mailToSend, userInfo := userInfo, udiTimeOut := 30000000,sServerMessage => sServerMessage);\n\t\t\t\t\tIF SendMailFB.xDone OR SendMailFB.xError THEN\n\t\t\t\t\t\tIF SendMailFB.xDone THEN\n\t\t\t\t\t\t\tsMailSendInfo := 'Your message has been sent';\n\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\teSendError := SendMailFB.eError;\n\t\t\t\t\t\tIF SendMailFB.xError THEN\n\t\t\t\t\t\t\tsteSendError := INT_TO_STRING(eSendError);\n\t\t\t\t\t\t\tsteSendError:= concat(steSendError, ' Send error ');\n\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\n\t\t\t\t\t\t(* This will reset the function block and release the Server lock.*)\n\t\t\t\t\t\tSendMailFB( xExecute := FALSE, ServerFB := ServerFB);\n\t\t\t\t\t\teState := STATES.WAITING;\n\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\tSTATES.NEW_MAIL: (* prepare inputs to compose new mail *)\n\t\t\t\t\t(* Set visability for Visu Elements *)\n\t\t\t\t\txInvisibleSendMail := FALSE;\n\t\t\t\t\txInvisibleRecvMail := TRUE;\n\t\t\t\t\t(* reset values for writing new mail *)\n\t\t\t\t\tmailToSend.sMailTo := '';\n\t\t\t\t\tmailToSend.sMailCC := '';\n\t\t\t\t\tmailToSend.sMailBCC := '';\n\t\t\t\t\tmailToSend.sMailFrom := '';\n\t\t\t\t\tmailToSend.sSubject := '';\n\t\t\t\t\tmailToSend.sAttachmentFilePath := '';\n\t\t\t\t\tsBodyToSend := '';\n\t\t\t\t\tsMailSendInfo := '';\n\t\t\t\t\t\n\t\t\t\t\teState := STATES.WAITING;\n\t\t\t\t\t\n\tSTATES.RECEIVE_MAIL: (* receive mail *)\n\t\t\t\t\t(* setting visabiltiy for Visu Elements *)\n\t\t\t\t\txInvisibleSendMail := TRUE;\n\t\t\t\t\txInvisibleRecvMail := FALSE;\n\t\t\t\t\t\n\t\t\t\t\tReceiveMailFB(xExecute := TRUE, ServerFB := ServerFB, userInfo := userInfo, emailMemory := emailMemory, udiTimeOut := 30000000, sServerMessage => sServerMessage);\n\t\t\t\t\t\tIF ReceiveMailFB.xDone OR ReceiveMailFB.xError THEN\n\t\t\t\t\t\t\t(* Only save the result, when no error occured.*)\n\t\t\t\t\t\t\tIF ReceiveMailFB.xDone THEN\n\t\t\t\t\t\t\t\tmailRecv := ReceiveMailFB.Receive;\n\t\t\t\t\t\t\t\tsMailRecvTime := DT_TO_STRING(mailRecv.dtTime);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\teReceiveError := ReceiveMailFB.eError;\n\t\t\t\t\t\t\t(* This will reset the function block and release the Server lock.*)\n\t\t\t\t\t\t\tReceiveMailFB(xExecute := FALSE, ServerFB := ServerFB);\n\t\t\t\t\t\t\teState := STATES.WAITING;\n\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\t\n\tSTATES.DELETE_MAIL:\t(* delete mail an check automaticaly for new mail *)\n\t\t\t\t\t(* setting visabiltiy for Visu Elements *)\n\t\t\t\t\txInvisibleSendMail := TRUE;\n\t\t\t\t\txInvisibleRecvMail := FALSE;\n\t\t\t\t\t\n\t\t\t\t\tDeleteMailFB(xExecute:= TRUE, ServerFB := ServerFB, MailToDelete := mailRecv, userInfo := userInfo, udiTimeOut := 30000000, sServerMessage => sServerMessage);\n\t\t\t\t\t\tIF DeleteMailFB.xDone OR DeleteMailFB.xError THEN\n\t\t\t\t\t\t\teDeleteError := DeleteMailFB.eError;\n\t\t\t\t\t\t\t(* This will reset the function block and release the Server lock.*)\n\t\t\t\t\t\t\tDeleteMailFB(xExecute := FALSE, ServerFB := ServerFB);\n\t\t\t\t\t\t\teState := STATES.RECEIVE_MAIL;\n\t\t\t\t\t\t\t(* delete the body of the last received mail *)\n\t\t\t\t\t\t\tsBodyRecv := '';\n\t\t\t\t\t\t\tmailRecv.sSubject := '';\n\t\t\t\t\t\t\tmailRecv.sReceiver := '';\n\t\t\t\t\t\t\tmailRecv.sSender := '';\n\t\t\t\t\t\t\tmailRecv.sMailID := '';\n\t\t\t\t\t\t\tmailRecv.sCarbonCopy := '';\n\t\t\t\t\t\t\tmailRecv.sFilenames := '';\n\t\t\t\t\t\tEND_IF\n\t\t\t\t\t\n\tSTATES.SAVE_CONF: (* save values to   persistence value and setup mail *)\n\t\t\t\t\n\t\n\t\t\t\t(* Memory for the ReceiveMail *)\n\t\t\t\temailMemory.pBody := ADR(sBodyRecv);\n\t\t\t\temailMemory.udiBodySize := SIZEOF(sBodyRecv) -1;\t\t\n\t\t\t\t\n\t\t\t\t(* authentication information for the mail account *)\n\t\t\t\tuserInfo.sUserName := sUserName; \n\t\t\t\tuserInfo.sPassword := sPassword;\n\t\t\t\t\n\t\t\t\t(* Folder to safe incomming attachments *)\n\t\t\t\temailMemory.sAttachFolder := sAttachmentFolder;\n\t\t\t\tIF xTLS THEN\n\t\t\t\t\teConnectionType := MAIL.CONNECTION_TYPE.TLS;\n\t\t\t\tELSE\n\t\t\t\t\teConnectionType := MAIL.CONNECTION_TYPE.STD;\n\t\t\t\tEND_IF\n\t\t\t\tServerFB(xExecute := TRUE, sSMTPServer := sSmtpServer, uiPortSMTP := uiSmtpPort,\n\t\t\t\t\t\t  sPopServer := sPopServer, uiPortPOP := uiPop3Port, eConnectionType := eConnectionType);\n\t\t\t\t\t\t  \n\t\t\t\t(* setting visability for Visu Elements *)\n\t\t\t\txInvisibleSendMail := TRUE;\n\t\t\t\txInvisibleRecvMail := FALSE;\n\t\t\t\n\t\t\t\teState := STATES.WAITING;\t\n\t\t\t\t\t\n\tELSE\n\t\t  eState := STATES.WAITING; (* State where the program waits for new instructions *)\n\nEND_CASE\nIF sendEmailtime=T#0S THEN\n\tsendEmailtime:=T#5M;\nEND_IF\n\npyScript := 'python3 /home/jci/CodesysGz_PT.py >> /tmp/CodesysGz_PT.log ';\npyEmailscript := 'python3 /home/jci/mail/send_email.py >> /tmp/CodesysGz_PT.log ';\ndelayt (IN:= TRUE, PT:=sendEmailtime);\n\tIF delayt.Q THEN\n\t\tdelayt(IN:= FALSE); \n\t\tmailcounter := mailcounter + 1 ;\n\t\tsMailcounter := INT_TO_STRING(mailcounter) ;\n\t\tsstartcounter := INT_TO_STRING(startcounter) ;\n\t\tSysProcess.SysProcessExecuteCommand2(\n\t\t \tpyScript,\n\t\t\tpszStdOut:=szStdOout, \n\t\t\tudiStdOutLen:= SIZEOF(szStdOout), \n\t\t\tpResult := ADR(dutResult));\n\t\tSysProcess.SysProcessExecuteCommand2(\n\t\t \tpyEmailscript,\n\t\t\tpszStdOut:=szStdOout, \n\t\t\tudiStdOutLen:= SIZEOF(szStdOout), \n\t\t\tpResult := ADR(dutResult));\n\t\tsMailSendInfo := 'Radar 2.0 email script sent message' ;\t\n\tEND_IF\n\t\nresettimer (IN:= TRUE, PT:=T#200S);\n\tIF (resettimer.Q) AND (startcounter <2) THEN \n\t\tresettimer(IN:=FALSE);\t\n\t\txResetServer := TRUE;\n\t\teState :=STATES.INIT_SERVER;\n\t\tfStart_check := FALSE ;\n\t\t\n\tEND_IF\n\n","LineInfoPersistence":"(string)ea5b553e-15cb-4608-8dd0-f02462fed24a_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)(* This program has seven different states: FIRST_START, INIT_SERVER, SEND_MAIL, NEW_MAIL, \nRECEIVE_MAIL, DELETE_MAIL and WAITING state. After starting the program will first change in to the \nFIRST_START state then it will remain in the WAITING state. \nIf the program gets input from the MainVisu_PRG it will switch into another state e.g. the NEW_MAIL state. \nThe program will stay in this state until it reaches the condition to change to another state e.g. if the mail has been sent \nthe program changes back to the WAITING state. *)\nPROGRAM Mail_PRG\nVAR\n\t\n\tfStart_check \t\t:BOOL\t\t; // check if first stast is run \n\ttimertest\t\t\t:BOOL   := FALSE        ; // check timerdelay\n\tdelayt \t\t\t\t: STANDARD.TON  ;\n\tresettimer          : TON\t\t\t;\n\tstartcounter : INT  ;\n\tmailcounter  : INT  ;\n\tsMailcounter : STRING ;\n\tsstartcounter : STRING ;\n\tsteSendError : STRING;\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\t\n\tsendEmailtime : TIME ;\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\n\tmailAttachmentFilePath  : STRING :='/home/jci/mail/trend.txt.gz';\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\n\tsDataemail\t\t\t: STRING ;\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\n\tsDataemailheader\t:STRING ;\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\t\n\tsUserName\t\t\t: STRING \t\t; (* The user name for POP3 and SMTP login. *)\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\n\tsPassword\t\t\t: STRING \t\t; (* The password for POP3 and SMTP login. *)\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\n\tsAttachmentFolder\t: STRING \t\t; (* The folder where received attachments will be saved. *)\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\t\n\tsSmtpServer\t\t\t: STRING \t\t; (* The address of the SMTP server. *)\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\n\tsPopServer\t\t\t: STRING \t\t; (* The address of the POP3 server. *)\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\n\tuiSmtpPort\t\t\t: UINT \t\t\t; (*Port for SMTP 465*)\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\n\tuiPop3Port\t\t\t: UINT \t\t\t; (*Port for POP3 995*)\n\t{attribute 'ac_persist' := 'PersistenceChannel'}\n\txTLS\t\t\t\t: BOOL \t\t\t; (*Use TLS connection*)\n\t\n\tSendMailFB\t\t\t: MAIL.SendMail; (* Function block to send an email *)\n\tReceiveMailFB\t\t: MAIL.ReceiveMail; (* Function block to receive an email *)\n\tDeleteMailFB\t\t: MAIL.DeleteMail; (* Function block to delete an email *)\t\n\tServerFB\t\t\t: MAIL.Server; (* Function block for the connection to the server *)\n\n\teState\t\t\t\t: STATES := 0 ; (* The state for switching the cases in Mail_PRG.*)\n\t\n\tmailRecv \t\t\t: MAIL.EMAIL_RECV; (* Information of the received short message.*)\n\tuserInfo\t\t\t: MAIL.USER_INFO; (* Authentication information for the mail account *)\n\temailMemory\t\t\t: MAIL.EMAIL_MEMORY; (* Folder for receving attachments and the pointer to the memory for the text message. *)\n\t\n\tmailToSend\t\t\t: MAIL.EMAIL_SEND; (* The mail which should be send. *)\n\tsBodyRecv\t\t\t: STRING(4096); (* The memory the the received message text. *)\n\tsBodyToSend\t\t\t: STRING(4096); (* The text message to send. *)\n\tsMailRecvTime\t\t: STRING; (*holds the time of a recieved Mail as String*)\n\t\n\teSendError\t\t\t: MAIL.ERROR; (* sending error *)\n\teReceiveError\t\t: MAIL.ERROR; (* receiving error *)\n\teDeleteError\t\t: MAIL.ERROR; (* deleting error *)\n\n\txResetServer\t\t: BOOL;\t(* reinitialize the server *)\n\tsMailSendInfo\t\t: STRING; (* status info for visualization when a mail was sent *)\n\txInvisibleSendMail\t: BOOL; \n\txInvisibleRecvMail\t: BOOL; \n\tiMessageCnt\t\t\t: INT;\n\tsServerMessage\t\t: STRING(255);\n\teConnectionType \t: MAIL.CONNECTION_TYPE;\n\t\npyScript : STRING ;\npyEmailscript : STRING;\nbashscript : STRING ;\nszStdOout :STRING ;\ndutResult : STRING ;\n\n\nEND_VAR","LineInfoPersistence":"(string)ea5b553e-15cb-4608-8dd0-f02462fed24a_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)643","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}